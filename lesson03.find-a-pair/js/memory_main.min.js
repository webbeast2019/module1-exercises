const memoryGlobal={deck:[],gameStatus:0,solved:0,currentCard:null,pairCount:8};class Card{constructor(face){this.face=face,this.showing=!1}}function reset_game(pairCount=8){for(Object.assign(memoryGlobal,{deck:[],solved:0,gameStatus:0,currentCard:null}),i=1;i<pairCount+1;i++)memoryGlobal.deck.push(new Card(i)),memoryGlobal.deck.push(new Card(i));arrayShuffle(memoryGlobal.deck),drawBoard()}function cardSelected(selectedCard){if(!1===memoryGlobal.deck[selectedCard].showing)switch(memoryGlobal.gameStatus){case 0:flipCard(selectedCard),Object.assign(memoryGlobal,{currentCard:selectedCard,gameStatus:1});break;case 1:flipCard(selectedCard),memoryGlobal.deck[memoryGlobal.currentCard].face===memoryGlobal.deck[selectedCard].face?(memoryGlobal.gameStatus=0,memoryGlobal.solved+=1):(memoryGlobal.gameStatus=2,setTimeout(()=>{flipCard(selectedCard),flipCard(memoryGlobal.currentCard),memoryGlobal.gameStatus=0},1500))}else memoryGlobal.solved===memoryGlobal.pairCount&&reset_game(memoryGlobal.pairCount)}function flipCard(card){memoryGlobal.deck[card].showing?(memoryGlobal.deck[card].showing=!1,showHideCard(card,!1)):(memoryGlobal.deck[card].showing=!0,showHideCard(card))}